import 'package:equatable/equatable.dart';

class WalletPublicInfo extends Equatable {
  /// a user-specified name to distinguish different wallets
  final String name;

  /// public hex address, for example "cosmos1ec4v57s7weuwatd36dgpjh8hj4gnj2cuut9sav" for cosmos-based chain
  /// or "0x9BCf3021B356F9352D3811fFCd4F778D63FdF208" for ethereum-based chain
  final String publicAddress;

  /// a uuid of the wallet credentials, should be generated by client apps when importing wallet info,
  /// for example using uuid package:
  /// Uuid().v4()
  final String walletId;

  /// Unique identifier for the blockchain that this wallet belongs to, it can be whatever the developer finds suitable,
  /// for example: "ethereum", "atom", "akash", "foo" or "bar" :)
  final String chainId;

  const WalletPublicInfo({
    required this.name,
    required this.publicAddress,
    required this.walletId,
    required this.chainId,
  });

  @override
  List<Object?> get props => [
        name,
        publicAddress,
        walletId,
        chainId,
      ];

  WalletPublicInfo copyWith({
    String? name,
    String? publicAddress,
    String? walletId,
    String? chainId,
  }) {
    if ((name == null || identical(name, this.name)) &&
        (publicAddress == null || identical(publicAddress, this.publicAddress)) &&
        (walletId == null || identical(walletId, this.walletId)) &&
        (chainId == null || identical(chainId, this.chainId))) {
      return this;
    }

    return WalletPublicInfo(
      name: name ?? this.name,
      publicAddress: publicAddress ?? this.publicAddress,
      walletId: walletId ?? this.walletId,
      chainId: chainId ?? this.chainId,
    );
  }
}
